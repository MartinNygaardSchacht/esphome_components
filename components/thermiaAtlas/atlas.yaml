external_components:
  - source: 
      type: git
      url: https://github.com/heinekmadsen/esphome_components
      ref: main
    refresh: 0s
    components: [atlas]

atlas:

switch:
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} fixed temperature setpoint"
    id: ${device}_fixedtemperaturesetpointe    
    register_type: coil
    address: 41
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

select:
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Operation mode"
    id: ${device}_operation_mode    
    address: 0
    optionsmap:
      "Off": 1
      "On": 3
      "Aux only": 2
      
number:
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Comfort Wheel"
    id: ${device}_comfort_wheel    
    min_value: 15
    max_value: 25
    step: 1.0
    address: 5
    lambda: "return (x/100);"
    write_lambda: |-
      ESP_LOGD("main","Processing new target temp");
      uint16_t new_temp = x * 100;
      return new_temp;
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} fixed system setpoint"
    id: ${device}_fixed_system_setpoint    
    min_value: 0
    max_value: 200
    step: 1.0
    address: 116
    lambda: "return (x/100);"
    write_lambda: |-
      ESP_LOGD("main","Processing new fixed system setpoint temp");
      uint16_t new_temp = x * 100;
      return new_temp;
    
    
sensor:
## Sensors from slave 1 (Thermia Atlas 18) 

  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Compressor Speed"
    id: ${device}_compressor_speed
    state_class: measurement
    unit_of_measurement: RPM
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 5
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} External heater demand"
    id: ${device}_external_heater_demand
    state_class: measurement
    unit_of_measurement: "%"
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 6
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Discharge pipe temperature"
    id: ${device}_discharge_pipe_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 7
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Condenser in temperature"
    id: ${device}_condenser_in_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 8
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Condenser out temperature"
    id: ${device}_condenser_out_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 9
    filters:
      - multiply: 0.01
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Brine In temp"
    id: ${device}_brine_in_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 10
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Brine Out temp"
    id: ${device}_brine_out_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 11
    filters:
      - multiply: 0.01

  - platform: template
    name: "${name} Brine delta temperature"
    id: "${device}_brine_delta_temperature"
    lambda: |-
      float brine_in_temp = (id(${device}_brine_in_temp).state);
      float brine_out_temp = (id(${device}_brine_out_temp).state);
      float x = (brine_in_temp - brine_out_temp);
      return x;
    update_interval: ${updates}
    state_class: measurement
    unit_of_measurement: °C
    accuracy_decimals: 1
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} System supply line temperature"
    id: ${device}_system_line_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 12
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Outdoor temperature"
    id: ${device}_outdoor_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 13
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} System supply line calculated set point"
    id: ${device}_system_supply_line_calculated_setpoint
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 18
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} System return line temperature"
    state_class: measurement
    id: ${device}_system_return_temp
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 27
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Buffer tank temperature"
    id: ${device}_buffer_tank_temp
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 41
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Brine circulation pump speed"
    id: ${device}_brine_pump_speed
    state_class: measurement
    unit_of_measurement: "%"
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 44
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Compressor operating hours MSB" 
    id: ${device}_operating_hours_msb
    state_class: measurement
    unit_of_measurement: "hours" 
    value_type: U_WORD
    register_type: read
    address: 48
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Compressor operating hours LSB" 
    id: ${device}_operating_hours_lsb
    state_class: measurement
    unit_of_measurement: "hours" 
    value_type: U_WORD
    register_type: read
    address: 49
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Compressor load" 
    id: ${device}_compressor_load
    state_class: measurement
    unit_of_measurement: "%" 
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 54
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Buffer tank charge set point"
    id: ${device}_buffer_tank_charge_set_point
    state_class: measurement
    unit_of_measurement: °C
    value_type: U_WORD
    accuracy_decimals: 1
    register_type: read
    address: 68
    filters:
      - multiply: 0.01
      
## Sensors from slave 2 (Carlo Gavazzi EM340 energy meter)    

  - platform: modbus_controller
    modbus_controller_id: ${meter}_modbus_controller
    name: "${name} total power consumption"
    address: 0x0034
    unit_of_measurement: "kWh"
    register_type: read
    value_type: S_DWORD_R
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${meter}_modbus_controller
    name: "${name} current power consumption"
    address: 0x0028
    register_count: 2
    unit_of_measurement: "W"
    register_type: read
    value_type: S_DWORD_R
    accuracy_decimals: 1
    device_class: power
    filters:
      - multiply: 0.1
      
text_sensor:      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Status" 
    id: ${device}_status
    register_type: read
    address: 1
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 1:  mode_str = "Manual operation"; break;
        case 2:  mode_str = "Defrost"; break;
        case 3:  mode_str = "Hot water"; break;
        case 4:  mode_str = "Heat"; break;
        case 5:  mode_str = "Active cooling"; break;
        case 6:  mode_str = "Pool"; break;
        case 7:  mode_str = "Anti legionella"; break;
        case 8:  mode_str = "Passive cooling"; break;
        case 99:  mode_str = "No demand"; break;
        case 100:  mode_str = "Off"; break;
        default: mode_str = "Unknown"; break;
      }
      return mode_str;  
      
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Comfort mode" 
    id: ${device}_comfort_mode
    register_type: read
    address: 82
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 1:  mode_str = "EVU"; break;
        case 4:  mode_str = "Normal"; break;
        case 5:  mode_str = "Comfort"; break;
        case 6:  mode_str = "Boost"; break;
        default: mode_str = "Unknown"; break;
      }
      return mode_str;

binary_sensor:  
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm A" 
    id: ${device}_alarm_a
    register_type: discrete_input
    address: 0 
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm B" 
    id: ${device}_alarm_b
    register_type: discrete_input
    address: 1  
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm C" 
    id: ${device}_alarm_c
    register_type: discrete_input
    address: 2
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm D" 
    id: ${device}_alarm_d
    register_type: discrete_input
    address: 3
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm E" 
    id: ${device}_alarm_e
    register_type: discrete_input
    address: 4
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} Alarm" 
    id: ${device}_alarm
    register_type: discrete_input
    address: 66
    
  - platform: modbus_controller
    modbus_controller_id: ${device}_modbus_controller
    name: "${name} External heater" 
    id: ${device}_external_heater
    register_type: discrete_input
    address: 206